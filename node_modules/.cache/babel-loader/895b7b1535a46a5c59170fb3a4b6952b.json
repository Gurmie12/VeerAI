{"ast":null,"code":"var _jsxFileName = \"/Users/gurman/Desktop/veer AI/veerai/src/components/Contact.js\";\nimport React, { useState, useEffect } from 'react';\nimport '../css/contact.css';\nimport REST from './RESTAPI';\n\nfunction Contact() {\n  //Create Hooks for dynamicly changing inputs\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [contacts, setContacts] = useState([]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (email === \"\" || phone === \"\") {\n      //If the fields are empty, display a warning and do not submit\n      renderAlert('Please fill in all of the fields before submiting!', 'alert-danger');\n    } else {\n      //If the fields are not empty, validate them on server side (Local Storage)\n      //If the localstorage is empty, store contact without validation since no duplicates exist\n      if (localStorage.getItem('Contacts') === null) {\n        //Create a new contacts array and an object that holds the contacts phone number and email\n        let contactArr = [];\n        const contactObj = {\n          phone_number: phone,\n          email_address: email\n        };\n        contactArr.push(contactObj); //Stringify the array to be stored as a key:value pair in the local storage table\n\n        contactArr = JSON.stringify(contactArr); //Set the key and value and return an alert\n\n        localStorage.setItem('Contacts', contactArr);\n        renderAlert('Your Form was Succesfully submited', 'alert-success'); //Clear hooks and form input\n\n        document.getElementById('email-input').value = \"\";\n        document.getElementById('phone-input').value = \"\";\n        setEmail('');\n        setPhone('');\n      } else {\n        //Set a variable for the current localstorage array\n        let contactsArr = JSON.parse(localStorage.getItem('Contacts')); //Check to see if a duplicate exists\n\n        let duplicate = contactsArr.find(contact => {\n          //Assure that all inputs and saved data are lowercase and do not contain spaces for matching purposes\n          let contact_phone = contact.phone_number.toString().replace(/\\s/g, '');\n          let contact_email = contact.email_address.toLowerCase();\n\n          if (contact_email === email.toLowerCase() || contact_phone === phone.toString().replace(/\\s/g, '')) {\n            return contact;\n          }\n        }); //If no duplicate was found create an object for the contact and push it to the array\n        //Finally set the localstorage to the new array and render an alert\n\n        if (duplicate !== undefined) {\n          renderAlert('A Contact was found with the same phone number or email! Try Again!', 'alert-danger');\n        } else {\n          const contactObj = {\n            phone_number: phone,\n            email_address: email\n          };\n          contactsArr.push(contactObj);\n          contactsArr = JSON.stringify(contactsArr);\n          localStorage.setItem('Contacts', contactsArr);\n          renderAlert('Your Form was Succesfully submited', 'alert-success'); //Clear the hooks and the form input\n\n          document.getElementById('email-input').value = \"\";\n          document.getElementById('phone-input').value = \"\";\n          setEmail('');\n          setPhone('');\n        }\n      }\n    }\n  }; //A lifecycle component that retreives all of the data from localstorage and displays it for \n  //Testing purposes and accuracy Purposes\n  //Want it to retrieve only if the length of the contacts array changes in localstorage\n\n\n  useEffect(() => {\n    setContacts(JSON.parse(localStorage.getItem('Contacts')));\n  }, JSON.parse(localStorage.getItem('Contacts')).length); //Function handeling the display of alerts\n\n  function renderAlert(message, className) {\n    //Set Dom vairables for where the alert will be placed and create a new alert component\n    const inputDiv = document.getElementById('contact-body');\n    const inputForm = document.getElementById('contact-form');\n    const alert = document.createElement('div');\n    alert.id = \"alert\";\n    alert.className = \"alert center-text \" + className;\n    alert.appendChild(document.createTextNode(message)); //Check that an alert is not already displayed\n\n    if (document.getElementById(\"alert\")) {\n      document.getElementById('alert').remove();\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    } else {\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    }\n  } //Function that assists in the display and rendering of the contacts table value into the page\n\n\n  const renderContacts = () => {\n    console.log(contacts);\n\n    if (contacts.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, \"There are no contacts currently\"));\n    } else {\n      contacts.map((contact, i) => {\n        return /*#__PURE__*/React.createElement(\"tbody\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          scope: \"row\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }\n        }, i + 1), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }\n        }, contact.email_address), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }\n        }, contact.phone_number)));\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 mt-2\",\n    id: \"contact-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Contact Form\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card bg-dark mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body text-center justify-content-center mt-3\",\n    id: \"contact-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"contact-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"email-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 33\n    }\n  }, \"Email Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    id: \"email-input\",\n    className: \"form-control\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"phone-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 33\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"phone\",\n    id: \"phone-input\",\n    className: \"form-control\",\n    onChange: e => setPhone(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  }, \"Submit!\")))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 29\n    }\n  }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 29\n    }\n  }, \"Email Address\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  }, \"Phone Number\"))), renderContacts())));\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/gurman/Desktop/veer AI/veerai/src/components/Contact.js"],"names":["React","useState","useEffect","REST","Contact","email","setEmail","phone","setPhone","contacts","setContacts","handleSubmit","e","preventDefault","renderAlert","localStorage","getItem","contactArr","contactObj","phone_number","email_address","push","JSON","stringify","setItem","document","getElementById","value","contactsArr","parse","duplicate","find","contact","contact_phone","toString","replace","contact_email","toLowerCase","undefined","length","message","className","inputDiv","inputForm","alert","createElement","id","appendChild","createTextNode","remove","insertBefore","setTimeout","renderContacts","console","log","map","i","target"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport '../css/contact.css';\nimport REST from './RESTAPI';\n\nfunction Contact(){\n    //Create Hooks for dynamicly changing inputs\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n\n        if(email === \"\" || phone === \"\"){ //If the fields are empty, display a warning and do not submit\n            renderAlert('Please fill in all of the fields before submiting!', 'alert-danger');\n        }else{ //If the fields are not empty, validate them on server side (Local Storage)\n\n            //If the localstorage is empty, store contact without validation since no duplicates exist\n            if(localStorage.getItem('Contacts') === null){\n\n                //Create a new contacts array and an object that holds the contacts phone number and email\n                let contactArr = [];\n                const contactObj = {\n                    phone_number: phone,\n                    email_address: email\n                };\n                contactArr.push(contactObj);\n\n                //Stringify the array to be stored as a key:value pair in the local storage table\n                contactArr = JSON.stringify(contactArr);\n\n                //Set the key and value and return an alert\n                localStorage.setItem('Contacts', contactArr);\n                renderAlert('Your Form was Succesfully submited', 'alert-success');\n\n                //Clear hooks and form input\n                document.getElementById('email-input').value = \"\";\n                document.getElementById('phone-input').value = \"\";\n                setEmail('');\n                setPhone('');\n            }else{\n\n                //Set a variable for the current localstorage array\n                let contactsArr = JSON.parse(localStorage.getItem('Contacts'));\n\n                //Check to see if a duplicate exists\n                let duplicate = contactsArr.find(contact => {\n\n                    //Assure that all inputs and saved data are lowercase and do not contain spaces for matching purposes\n                    let contact_phone = contact.phone_number.toString().replace(/\\s/g, '');\n                    let contact_email = contact.email_address.toLowerCase();\n                    if(contact_email === email.toLowerCase() || contact_phone === phone.toString().replace(/\\s/g, '')){\n                        return contact;\n                    }\n                });\n\n                //If no duplicate was found create an object for the contact and push it to the array\n                //Finally set the localstorage to the new array and render an alert\n                if(duplicate !==  undefined){\n                    renderAlert('A Contact was found with the same phone number or email! Try Again!', 'alert-danger');\n                }else{\n                    const contactObj = {\n                        phone_number: phone,\n                        email_address: email\n                    }\n                    contactsArr.push(contactObj);\n\n                    contactsArr = JSON.stringify(contactsArr);\n\n                    localStorage.setItem('Contacts', contactsArr);\n                    renderAlert('Your Form was Succesfully submited', 'alert-success');\n\n                    //Clear the hooks and the form input\n                    document.getElementById('email-input').value = \"\";\n                    document.getElementById('phone-input').value = \"\";\n                    setEmail('');\n                    setPhone('');\n                }\n            }\n        }   \n    }\n\n    //A lifecycle component that retreives all of the data from localstorage and displays it for \n    //Testing purposes and accuracy Purposes\n    //Want it to retrieve only if the length of the contacts array changes in localstorage\n    useEffect(() =>{\n        setContacts(JSON.parse(localStorage.getItem('Contacts')));\n    }, JSON.parse(localStorage.getItem('Contacts')).length)\n\n    //Function handeling the display of alerts\n    function renderAlert(message, className){\n        //Set Dom vairables for where the alert will be placed and create a new alert component\n        const inputDiv = document.getElementById('contact-body');\n        const inputForm = document.getElementById('contact-form');\n        const alert = document.createElement('div');\n        alert.id = \"alert\";\n        alert.className = \"alert center-text \" + className;\n        alert.appendChild(document.createTextNode(message));\n\n        //Check that an alert is not already displayed\n        if(document.getElementById(\"alert\")){\n            document.getElementById('alert').remove();\n            inputDiv.insertBefore(alert, inputForm);\n            setTimeout(() =>{\n            alert.remove();\n            }, 3000);\n        }else{\n            inputDiv.insertBefore(alert, inputForm);\n            setTimeout(() =>{\n            alert.remove();\n            }, 3000);\n        }\n    }\n\n    //Function that assists in the display and rendering of the contacts table value into the page\n    const renderContacts = () =>{\n        console.log(contacts);\n        if(contacts.length === 0){\n            return(\n                <div>\n                    <h3>There are no contacts currently</h3>\n                </div>\n            )\n        }else{\n            contacts.map((contact, i) =>{\n                return(\n                    <tbody key={i}>\n                        <tr>\n                            <th scope=\"row\">{i + 1}</th>\n                            <td>{contact.email_address}</td>\n                            <td>{contact.phone_number}</td>\n                        </tr>\n                    </tbody>\n                )\n            })\n        }\n    }\n    return(\n        <div className=\"contact-body\">\n            <div className=\"container text-center\">\n                <h1 className=\"display-4 mt-2\" id=\"contact-title\">Contact Form</h1>\n                <br/>\n                <br/>\n\n                <div className=\"card bg-dark mb-5\">\n                    <div className=\"card-body text-center justify-content-center mt-3\" id=\"contact-body\">\n                        <form id=\"contact-form\">\n                            <div className=\"form-group mb-3\">\n                                <label for=\"email-input\">Email Address</label>\n                                <input type=\"email\" id=\"email-input\" className=\"form-control\" onChange={e => setEmail(e.target.value)}></input>\n                            </div>\n                            <div className=\"form-group mb-3\">\n                                <label for=\"phone-input\">Phone Number</label>\n                                <input type=\"phone\" id=\"phone-input\" className=\"form-control\" onChange={e => setPhone(e.target.value)}></input>\n                            </div>\n                            <button className=\"btn btn-success\" onClick={e => handleSubmit(e)}>Submit!</button>\n                        </form>\n                    </div>\n                </div>\n                <br/>\n                <br/>\n\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Email Address</th>\n                            <th scope=\"col\">Phone Number</th>\n                        </tr>\n                    </thead>\n                    {renderContacts()}\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}