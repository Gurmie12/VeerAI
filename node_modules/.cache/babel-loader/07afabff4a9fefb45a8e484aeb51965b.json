{"ast":null,"code":"var _jsxFileName = \"/Users/gurman/Desktop/veer AI/veerai/src/components/Contact.js\";\nimport React, { useState } from 'react';\nimport '../css/contact.css';\n\nfunction Contact() {\n  //Create Hooks for dynamicly changing inputs\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (email === \"\" || phone === \"\") {\n      //If the fields are empty, display a warning and do not submit\n      renderAlert('Please fill in all of the fields before submiting!', 'alert-danger');\n    } else {\n      //If the fields are not empty, validate them on server side (Local Storage)\n      //If the localstorage is empty, store contact without validation since no duplicates exist\n      if (localStorage.getItem('Contacts') === null) {\n        //Create a new contacts array and an object that holds the contacts phone number and email\n        let contactArr = [];\n        const contactObj = {\n          phone_number: phone,\n          email_address: email\n        };\n        contactArr.push(contactObj); //Stringify the array to be stored as a key:value pair in the local storage table\n\n        contactArr = JSON.stringify(contactArr); //Set the key and value and return an alert\n\n        localStorage.setItem('Contacts', contactArr);\n        renderAlert('Your Form was Succesfully submited', 'alert-success');\n      } else {\n        //Set a variable for the current localstorage array\n        let contactsArr = JSON.parse(localStorage.getItem('Contacts')); //Check to see if a duplicate exists\n\n        let duplicate = contactsArr.find(contact => contact.emailemail_address === email || contact.phone_number === phone); //If no duplicate was found create an object for the contact and push it to the array\n        //Finally set the localstorage to the new array and render an alert\n\n        if (duplicate !== null) {\n          renderAlert('A Contact was found with the same phone number or email! Try Again!', 'alert-danger');\n        } else {\n          const contactObj = {\n            phone_number: phone,\n            email_address: email\n          };\n          contactsArr.push(contactObj);\n          contactsArr = JSON.stringify(contactsArr);\n          localStorage.setItem('Contacts', contactsArr);\n          renderAlert('Your Form was Succesfully submited', 'alert-success');\n        }\n      }\n    }\n  }; //Function handeling the display of alerts\n\n\n  function renderAlert(message, className) {\n    //Set Dom vairables for where the alert will be placed and create a new alert component\n    const inputDiv = document.getElementById('contact-body');\n    const inputForm = document.getElementById('contact-form');\n    const alert = document.createElement('div');\n    alert.id = \"alert\";\n    alert.className = \"alert center-text \" + className;\n    alert.appendChild(document.createTextNode(message)); //Check that an alert is not already displayed\n\n    if (document.getElementById(\"alert\")) {\n      document.getElementById('alert').remove();\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    } else {\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 mt-2\",\n    id: \"contact-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Contact Form\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body text-center justify-content-center mt-3\",\n    id: \"contact-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"contact-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"email-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, \"Email Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    id: \"email-input\",\n    className: \"form-control\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"phone-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"phone\",\n    id: \"phone-input\",\n    className: \"form-control\",\n    onChange: e => setPhone(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, \"Submit!\"))))));\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/gurman/Desktop/veer AI/veerai/src/components/Contact.js"],"names":["React","useState","Contact","email","setEmail","phone","setPhone","handleSubmit","e","preventDefault","renderAlert","localStorage","getItem","contactArr","contactObj","phone_number","email_address","push","JSON","stringify","setItem","contactsArr","parse","duplicate","find","contact","emailemail_address","message","className","inputDiv","document","getElementById","inputForm","alert","createElement","id","appendChild","createTextNode","remove","insertBefore","setTimeout","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport '../css/contact.css';\n\nfunction Contact(){\n    //Create Hooks for dynamicly changing inputs\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n\n        if(email === \"\" || phone === \"\"){ //If the fields are empty, display a warning and do not submit\n            renderAlert('Please fill in all of the fields before submiting!', 'alert-danger');\n        }else{ //If the fields are not empty, validate them on server side (Local Storage)\n\n            //If the localstorage is empty, store contact without validation since no duplicates exist\n            if(localStorage.getItem('Contacts') === null){\n\n                //Create a new contacts array and an object that holds the contacts phone number and email\n                let contactArr = [];\n                const contactObj = {\n                    phone_number: phone,\n                    email_address: email\n                };\n                contactArr.push(contactObj);\n\n                //Stringify the array to be stored as a key:value pair in the local storage table\n                contactArr = JSON.stringify(contactArr);\n\n                //Set the key and value and return an alert\n                localStorage.setItem('Contacts', contactArr);\n                renderAlert('Your Form was Succesfully submited', 'alert-success');\n            }else{\n\n                //Set a variable for the current localstorage array\n                let contactsArr = JSON.parse(localStorage.getItem('Contacts'));\n\n                //Check to see if a duplicate exists\n                let duplicate = contactsArr.find(contact => contact.emailemail_address === email || contact.phone_number === phone);\n\n\n                //If no duplicate was found create an object for the contact and push it to the array\n                //Finally set the localstorage to the new array and render an alert\n                if(duplicate !== null){\n                    renderAlert('A Contact was found with the same phone number or email! Try Again!', 'alert-danger');\n                }else{\n                    const contactObj = {\n                        phone_number: phone,\n                        email_address: email\n                    }\n                    contactsArr.push(contactObj);\n\n                    contactsArr = JSON.stringify(contactsArr);\n\n                    localStorage.setItem('Contacts', contactsArr);\n                    renderAlert('Your Form was Succesfully submited', 'alert-success');\n                }\n            }\n        }   \n    }\n\n    //Function handeling the display of alerts\n    function renderAlert(message, className){\n        //Set Dom vairables for where the alert will be placed and create a new alert component\n        const inputDiv = document.getElementById('contact-body');\n        const inputForm = document.getElementById('contact-form');\n        const alert = document.createElement('div');\n        alert.id = \"alert\";\n        alert.className = \"alert center-text \" + className;\n        alert.appendChild(document.createTextNode(message));\n\n        //Check that an alert is not already displayed\n        if(document.getElementById(\"alert\")){\n            document.getElementById('alert').remove();\n            inputDiv.insertBefore(alert, inputForm);\n            setTimeout(() =>{\n            alert.remove();\n            }, 3000);\n        }else{\n            inputDiv.insertBefore(alert, inputForm);\n            setTimeout(() =>{\n            alert.remove();\n            }, 3000);\n        }\n    }\n    return(\n        <div className=\"contact-body\">\n            <div className=\"container text-center\">\n                <h1 className=\"display-4 mt-2\" id=\"contact-title\">Contact Form</h1>\n                <br/>\n                <br/>\n\n                <div className=\"card bg-dark\">\n                    <div className=\"card-body text-center justify-content-center mt-3\" id=\"contact-body\">\n                        <form id=\"contact-form\">\n                            <div className=\"form-group mb-3\">\n                                <label for=\"email-input\">Email Address</label>\n                                <input type=\"email\" id=\"email-input\" className=\"form-control\" onChange={e => setEmail(e.target.value)}></input>\n                            </div>\n                            <div className=\"form-group mb-3\">\n                                <label for=\"phone-input\">Phone Number</label>\n                                <input type=\"phone\" id=\"phone-input\" className=\"form-control\" onChange={e => setPhone(e.target.value)}></input>\n                            </div>\n                            <button className=\"btn btn-success\" onClick={e => handleSubmit(e)}>Submit!</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}