{"ast":null,"code":"var _jsxFileName = \"/Users/gurman/Desktop/veer AI/veerai/src/components/RESTAPI.js\";\nimport React, { useState } from 'react';\nimport '../css/contact.css';\n\nfunction REST() {\n  //Declare react hooks to dynamically render response from REST API and handles changes to input\n  const [apiResponse, setApiResponse] = useState(\"No Request Has Been Sent To REST API Yet\");\n  const [paramString, setParamString] = useState(''); //Function that handles clicking of the submit button\n  //Handles form, if the input is empty, returns an error and shows a display\n  //Fetches the API with the query string param attatched and waits for the promise and response\n  //JSON parses the response and sets the Hook accordingly\n\n  const handleSubmit = e => {\n    const input = document.getElementById('param-input');\n    e.preventDefault();\n\n    if (paramString === \"\") {\n      renderAlert('Please Fill out the param input below!', 'alert-danger');\n    } else {\n      fetch(`http://localhost:3001/paramchecker/${paramString}`).then(res => res.json()).then(data => {\n        if (data.res === false) {\n          setApiResponse(\"FALSE\");\n        } else {\n          setApiResponse(\"TRUE\");\n        } //Reset the input value and show a successful alert\n\n\n        input.value = \"\";\n        renderAlert('REST API Fetch Successful, check below for results', 'alert-success');\n      }).catch(err => {\n        renderAlert(err, 'alert-danger');\n      }).catch(err => {\n        renderAlert(err, 'alert-danger');\n      });\n    }\n  }; //Function that handles dispaly of alerts\n\n\n  function renderAlert(message, className) {\n    //Set Dom vairables for where the alert will be placed and create a new alert component\n    const inputDiv = document.getElementById('input-div');\n    const inputForm = document.getElementById('param-form');\n    const alert = document.createElement('div');\n    alert.id = \"alert\";\n    alert.className = \"alert center-text \" + className;\n    alert.appendChild(document.createTextNode(message)); //Check that an alert is not already displayed\n\n    if (document.getElementById(\"alert\")) {\n      document.getElementById('alert').remove();\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    } else {\n      inputDiv.insertBefore(alert, inputForm);\n      setTimeout(() => {\n        alert.remove();\n      }, 3000);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 mb-5\",\n    id: \"home-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Type A Parameter Below to Test The REST API\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body text-center justify-content-center mt-3 mb-3\",\n    id: \"input-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"param-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"param-input\",\n    id: \"input-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Param String\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"param-input\",\n    className: \"form-control mt-2\",\n    type: \"text\",\n    placeholder: \"e.g. Apple, Car, ABC, etc.\",\n    onChange: e => setParamString(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success mt-2\",\n    onClick: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Submit Request!\")))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead mt-5\",\n    id: \"response-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Response From REST API\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, apiResponse))));\n}\n\nexport default REST;","map":{"version":3,"sources":["/Users/gurman/Desktop/veer AI/veerai/src/components/RESTAPI.js"],"names":["React","useState","REST","apiResponse","setApiResponse","paramString","setParamString","handleSubmit","e","input","document","getElementById","preventDefault","renderAlert","fetch","then","res","json","data","value","catch","err","message","className","inputDiv","inputForm","alert","createElement","id","appendChild","createTextNode","remove","insertBefore","setTimeout","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport '../css/contact.css';\n\n\nfunction REST() {\n\n  //Declare react hooks to dynamically render response from REST API and handles changes to input\n  const[apiResponse, setApiResponse] = useState(\"No Request Has Been Sent To REST API Yet\");\n  const[paramString, setParamString] = useState('');\n\n\n  //Function that handles clicking of the submit button\n  //Handles form, if the input is empty, returns an error and shows a display\n  //Fetches the API with the query string param attatched and waits for the promise and response\n  //JSON parses the response and sets the Hook accordingly\n  const handleSubmit = (e) =>{\n    const input = document.getElementById('param-input');\n    e.preventDefault()\n    if(paramString === \"\"){\n      renderAlert('Please Fill out the param input below!', 'alert-danger');\n    }else{\n      fetch(`http://localhost:3001/paramchecker/${paramString}`)\n      .then(res => res.json())\n        .then(data =>{\n          if(data.res === false){\n            setApiResponse(\"FALSE\");\n          }else{\n            setApiResponse(\"TRUE\");\n          }\n\n          //Reset the input value and show a successful alert\n          input.value = \"\";\n          renderAlert('REST API Fetch Successful, check below for results', 'alert-success');\n        })\n        .catch(err =>{\n          renderAlert(err, 'alert-danger');\n        })\n      .catch(err =>{\n        renderAlert(err, 'alert-danger');\n      })\n    }\n  };\n\n\n  //Function that handles dispaly of alerts\n  function renderAlert(message, className){\n\n    //Set Dom vairables for where the alert will be placed and create a new alert component\n    const inputDiv = document.getElementById('input-div');\n    const inputForm = document.getElementById('param-form');\n    const alert = document.createElement('div');\n    alert.id = \"alert\";\n    alert.className = \"alert center-text \" + className;\n    alert.appendChild(document.createTextNode(message));\n\n    //Check that an alert is not already displayed\n    if(document.getElementById(\"alert\")){\n        document.getElementById('alert').remove();\n        inputDiv.insertBefore(alert, inputForm);\n        setTimeout(() =>{\n          alert.remove();\n        }, 3000);\n      }else{\n        inputDiv.insertBefore(alert, inputForm);\n        setTimeout(() =>{\n          alert.remove();\n        }, 3000);\n      }\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"container text-center\">\n\n\n        <h1 className=\"display-4 mb-5\" id=\"home-title\">Type A Parameter Below to Test The REST API</h1>\n        <br/>\n        <br/>\n        <div className=\"card bg-dark\">\n          <div className=\"card-body text-center justify-content-center mt-3 mb-3\" id=\"input-div\">\n            <form id=\"param-form\">\n              <div className=\"form-group\">\n                <label for=\"param-input\" id=\"input-label\">Param String</label>\n                <input id=\"param-input\" className=\"form-control mt-2\" type=\"text\" placeholder=\"e.g. Apple, Car, ABC, etc.\" onChange={e => setParamString(e.target.value)}></input>\n              </div>\n              <button className=\"btn btn-success mt-2\" onClick={e => handleSubmit(e)}>Submit Request!</button>\n            </form>\n          </div>\n        </div>\n        <br/>\n        <br/>\n\n\n        <p className=\"lead mt-5\" id=\"response-title\">Response From REST API</p>\n        <div>\n          <h3>{apiResponse}</h3>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default REST;\n"]},"metadata":{},"sourceType":"module"}